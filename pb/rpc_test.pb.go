// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_test.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RpcTestReq struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcTestReq) Reset()         { *m = RpcTestReq{} }
func (m *RpcTestReq) String() string { return proto.CompactTextString(m) }
func (*RpcTestReq) ProtoMessage()    {}
func (*RpcTestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e173c35651eae8ee, []int{0}
}

func (m *RpcTestReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTestReq.Unmarshal(m, b)
}
func (m *RpcTestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTestReq.Marshal(b, m, deterministic)
}
func (m *RpcTestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTestReq.Merge(m, src)
}
func (m *RpcTestReq) XXX_Size() int {
	return xxx_messageInfo_RpcTestReq.Size(m)
}
func (m *RpcTestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTestReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcTestReq proto.InternalMessageInfo

func (m *RpcTestReq) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type RpcTestRsp struct {
	Rsp                  string   `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcTestRsp) Reset()         { *m = RpcTestRsp{} }
func (m *RpcTestRsp) String() string { return proto.CompactTextString(m) }
func (*RpcTestRsp) ProtoMessage()    {}
func (*RpcTestRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e173c35651eae8ee, []int{1}
}

func (m *RpcTestRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RpcTestRsp.Unmarshal(m, b)
}
func (m *RpcTestRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RpcTestRsp.Marshal(b, m, deterministic)
}
func (m *RpcTestRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcTestRsp.Merge(m, src)
}
func (m *RpcTestRsp) XXX_Size() int {
	return xxx_messageInfo_RpcTestRsp.Size(m)
}
func (m *RpcTestRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcTestRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RpcTestRsp proto.InternalMessageInfo

func (m *RpcTestRsp) GetRsp() string {
	if m != nil {
		return m.Rsp
	}
	return ""
}

func init() {
	proto.RegisterType((*RpcTestReq)(nil), "pb.RpcTestReq")
	proto.RegisterType((*RpcTestRsp)(nil), "pb.RpcTestRsp")
}

func init() { proto.RegisterFile("rpc_test.proto", fileDescriptor_e173c35651eae8ee) }

var fileDescriptor_e173c35651eae8ee = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2a, 0x48, 0x8e,
	0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92,
	0xe3, 0xe2, 0x0a, 0x2a, 0x48, 0x0e, 0x49, 0x2d, 0x2e, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62,
	0x2e, 0x4a, 0x2d, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x91, 0xe5, 0x8b, 0x0b,
	0xc0, 0xf2, 0xc5, 0x05, 0x70, 0xf9, 0xe2, 0x02, 0x23, 0x43, 0x2e, 0x76, 0xa8, 0xbc, 0x90, 0x1a,
	0x17, 0x0b, 0x98, 0xe6, 0xd3, 0x2b, 0x48, 0xd2, 0x43, 0x18, 0x2a, 0x85, 0xc2, 0x2f, 0x2e, 0x48,
	0x62, 0x03, 0xdb, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xd1, 0xe6, 0x96, 0x8f, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcTestClient is the client API for RpcTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcTestClient interface {
	Test(ctx context.Context, in *RpcTestReq, opts ...grpc.CallOption) (*RpcTestRsp, error)
}

type rpcTestClient struct {
	cc *grpc.ClientConn
}

func NewRpcTestClient(cc *grpc.ClientConn) RpcTestClient {
	return &rpcTestClient{cc}
}

func (c *rpcTestClient) Test(ctx context.Context, in *RpcTestReq, opts ...grpc.CallOption) (*RpcTestRsp, error) {
	out := new(RpcTestRsp)
	err := c.cc.Invoke(ctx, "/pb.RpcTest/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcTestServer is the server API for RpcTest service.
type RpcTestServer interface {
	Test(context.Context, *RpcTestReq) (*RpcTestRsp, error)
}

// UnimplementedRpcTestServer can be embedded to have forward compatible implementations.
type UnimplementedRpcTestServer struct {
}

func (*UnimplementedRpcTestServer) Test(ctx context.Context, req *RpcTestReq) (*RpcTestRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterRpcTestServer(s *grpc.Server, srv RpcTestServer) {
	s.RegisterService(&_RpcTest_serviceDesc, srv)
}

func _RpcTest_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcTestServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RpcTest/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcTestServer).Test(ctx, req.(*RpcTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RpcTest",
	HandlerType: (*RpcTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _RpcTest_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc_test.proto",
}
